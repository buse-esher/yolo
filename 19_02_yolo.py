# -*- coding: utf-8 -*-
"""19.02 YOLO

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GcgIAOis8MKqur1qZtjXKQg59Z_oTzpw
"""

import os
import glob as glob
import matplotlib.pyplot as plt
import cv2
import requests
import random
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5
!pip install -r requirements.txt

!unzip /content/drive/MyDrive/dataset_mantar3.zip

"""#Train"""

# Train YOLOv5s
!python train.py --img 2048 --batch 2 --epochs 20 --data /content/yolov5/data/coco128.yaml --weights yolov5s.pt

# Commented out IPython magic to ensure Python compatibility.
# Start tensorboard
# Launch after you have started training to all the graphs needed for inspection
# logs save in the folder "runs"
# %load_ext tensorboard
# %tensorboard --logdir /content/yolov5/runs

"""#Detection"""

!python detect.py --weights /content/yolov5/runs/train/yolov5s_results/weights/best.pt --img 2048 --conf 0.4 --source /content/yolov5/data/dataset_mantar3/test

"""#Results"""

from utils.plots import plot_results

plot_results('/content/yolov5/runs/train/exp/weights/best.pt', conf_thres=0.4, save_txt=False)

from IPython.display import Image

Image(filename='/content/yolov5/runs/train/exp/results.png')

"""#IOU"""

from utils.general import non_max_suppression

model = torch.hub.load('ultralytics/yolov5', 'custom', path_or_model='/content/yolov5/runs/train/yolov5s_results/best.pt')

# Loading test images
img_dir = '/content/yolov5/data/test/images'
img_files = os.listdir(img_dir)

for img_file in img_files:
    # Detect objects
    img_path = os.path.join(img_dir, img_file)
    img = Image.open(img_path)
    results = model(img)

    # Apply non-max suppression
    results = non_max_suppression(results, conf_thres=0.4, iou_thres=0.5)

    # Compute IOU for each detection
    for i, det in enumerate(results):
        if det is not None and len(det):
            det = det[0]
            bbox = det[:4]
            conf = det[4]
            cls = det[5]
            iou = bbox_iou(bbox.unsqueeze(0), bbox.unsqueeze(0))
            print(f'Detected object: {cls}, confidence: {conf:.2f}, IOU: {iou[0][0]:.2f}')